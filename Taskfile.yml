# https://taskfile.dev

version: '3'

dotenv: [build-args.env]

env:
  DOCKER_BUILDKIT: 1

vars:
  GITLAB_IMAGE: "alpinelinux/gitlab:{{.GITLAB_VERSION}}"
  GITALY_IMAGE: "alpinelinux/gitaly:{{.GITALY_SERVER_VERSION}}"
  GITLAB_SHELL_IMAGE: "alpinelinux/gitlab-shell:{{.GITLAB_SHELL_VERSION}}"
  COMPOSE:
    sh: docker compose version >/dev/null 2>&1 && echo "docker compose" || echo "docker-compose"

tasks:
  build:
    desc: "build all images"
    deps:
      - .generate-env
      - build-gitlab-shell
      - build-gitaly
      - build-gitlab

  update:
    desc: "Update environment to current version and pull images"
    deps:
      - update-env
    cmds:
      - "{{.COMPOSE}} pull"

  update-env:
    desc: make sure all environment files are up-to-date
    deps:
      - .build-args
      - .generate-env
  up:
    desc: Run all containers
    cmds:
      - "{{.COMPOSE}} up -d"
    deps: [ update-env ]

  .build-args:
    cmds:
      - build/versions.sh >build-args.env
      - echo "Generated build-args.env"
    silent: true
    generates:
      - build-args.env
    sources:
      - build/versions.sh
      - VERSIONS
    run: once

  .deploy-libs:
    label: "deploy-libs-{{.project}}"
    cmds:
      - |-
        [[ -z "{{.project}}" ]] && { echo "\$project not provided"; exit 1; }
        install -Dm0644 lib/* -t {{.project}}/build/lib/
        echo "Deployed libs for {{.project}}"
    silent: true
    sources:
      - lib/libsetup
    generates:
      - "{{.project}}/build/lib/libsetup"
    run: when_changed

  .save-image:
    label: "save-image-{{.image}}"
    cmds:
      - |-
        mkdir -p docker-images
        docker image save {{.image}} | pigz >docker-images/{{.image | replace "/" "-"}}.tar.gz
        echo "Saved image {{.image}}"
    silent: true

  .generate-env:
    cmds:
      - |
        if [ -f .env ] && ! grep -q '^# GENERATED' .env; then
          echo "ERROR: Not overwriting non-generated .env file" >&2
          exit 1
        fi
      - printf '# GENERATED\n\n' >.env
      - find . -maxdepth 1 \( -name build-args.env -o -name '.env.*' \) -exec cat {} + >>.env
      - ': <VERSIONS >>.env'
      - echo "Generated .env"
    silent: true
    deps: [ .build-args ]
    sources: [ build-args.env, .env.*, VERSIONS]
    generates: [ .env ]

  ### GITLAB ###
  deploy-libs-gitlab:
    cmds:
      - |-
        install -Dm0644 lib/* -t overlay/usr/local/lib/
        echo "Deployed libs for gitlab"
    silent: true
    sources:
      - lib/libsetup
    generates:
      - "overlay/usr/local/lib/libsetup"
    run: when_changed
  build-gitlab:
    cmds:
      - "{{.COMPOSE}} build {{.CLI_ARGS}} gitlab"
    deps:
      - .build-args
      - build-gitlab-shell
      - deploy-libs-gitlab
    sources:
      - build-args.env
      - overlay/*
      - overlay/**/*
      - Dockerfile
    status:
      - docker image inspect {{.GITLAB_IMAGE}}
  save-image-gitlab:
    deps:
      - build-gitlab
    cmds:
      - task: .save-image
        vars: {image: "{{.GITLAB_IMAGE}}"}

  ### GITALY ###
  deploy-libs-gitaly:
    cmds:
      - task: .deploy-libs
        vars: {project: gitaly}
  build-gitaly:
    cmds:
      - "{{.COMPOSE}} build {{.CLI_ARGS}} gitaly"
    deps:
      - .build-args
      - deploy-libs-gitaly
      - build-gitlab-shell
    sources:
      - build-args.env
      - gitaly/*
      - gitaly/**/*
    status:
      - docker image inspect {{.GITALY_IMAGE}}
  save-image-gitaly:
    cmds:
      - task: .save-image
        vars: {image: "{{.GITALY_IMAGE}}"}

  ### GITLAB-SHELL ###
  deploy-libs-gitlab-shell:
    cmds:
      - task: .deploy-libs
        vars: {project: gitlab-shell}
  build-gitlab-shell:
    cmds:
      - "{{.COMPOSE}} build {{.CLI_ARGS}} gitlab-shell"
    deps:
      - .build-args
      - deploy-libs-gitlab-shell
    sources:
      - build-args.env
      - gitlab-shell/*
      - gitlab-shell/**/*
    run: once
    status:
      - docker image inspect {{.GITLAB_SHELL_IMAGE}}
  save-image-gitlab-shell:
    cmds:
      - task: .save-image
        vars: {image: "{{.GITLAB_SHELL_IMAGE}}"}

  save-images:
    deps:
      - save-image-gitlab-shell
      - save-image-gitaly
      - save-image-gitlab

  run:
    cmds:
      - "{{.COMPOSE}} run --rm {{.CLI_ARGS}}"

  config:
    cmds:
      - "{{.COMPOSE}} config"
